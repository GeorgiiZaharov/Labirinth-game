class GameManager {
    - window: sf::RenderWindow & // ссылка на окно игры
    - board_width: std::size_t // ширина игровой доски
    - board_height: std::size_t // высота игровой доски
    - cur_level: std::size_t // текущий уровень игры
    - num_models_of_enemy: std::size_t // количество моделей врагов
    - cell_w: float // ширина ячейки
    - cell_h: float // высота ячейки
    - people_size: float // размер персонажа
    - need_shoot: bool // флаг необходимости стрельбы
    - move_direct_x: float // направление движения по оси X
    - move_direct_y: float // направление движения по оси Y
    - alive_enemies: int // количество живых врагов
    - b: Board // объект игровой доски
    - h: Hero // объект главного героя
    - last_hero_moving_time: __int64_t // время последнего движения главного героя
    - survival_start_time: __int64_t // время начала выживания
    - enemies: std::vector<Enemy> // вектор врагов
    - clock: sf::Clock // часы для отслеживания времени
    - panel: Panel // панель управления игрой

    + GameManager() // конструктор по умолчанию
    + GameManager(window: sf::RenderWindow &) // конструктор с параметром
    + run(): void // метод запуска игры
    - input(): void // метод обработки ввода
    - treatment(): void // метод обработки событий
    - output(): void // метод вывода информации на экран
    - new_level(): void // метод запуска нового уровня
    - init(): void // метод инициализации игры
    - make_board_boom(): void // метод создания взрыва на доске
    - is_hero(globalMousePos: sf::Vector2f): bool // метод проверки наличия главного героя
    - is_enemy(globalMousePos: sf::Vector2f): bool // метод проверки наличия врага
    - get_enemy(globalMousePos: sf::Vector2f): Enemy & // метод получения объекта врага
}
class Enemy 
{
}
class Board
{
}
class Hero
{
}
struct Button
{
}
GameManager "1" *-- "1" Hero
GameManager "1" *-- "1" Board
GameManager "1" *-- "1" Button
GameManager "1" *-- "many" Enemy

