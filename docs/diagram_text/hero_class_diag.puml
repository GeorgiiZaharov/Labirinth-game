@startuml

class Hero {
    - plantBar: sf::RectangleShape
    - bombs: std::vector<Bomb>
    + Hero()
    + draw(window: sf::RenderWindow&, cur_time: __int64_t)
    + loadResources(): bool
    + add_bomb(): void
    + get_bomb_cnt(): int
    + planting(cur_time: __int64_t): void
    + drop_planting(): void
    + boom(): std::vector<sf::Vector2f>
    + suicide(): void
    + change_cash(delta_cash: int): void
    + get_cash(): int
    + update_cur_health(): void
    + change_max_health(delta_health: int): void
    + change_damage(delta_damage: int): void
    + change_speed(delta_speed: int): void
    + add_magazine(): void
    + change_recharge_time(delta_time: __int64_t): void
    + change_spread(delta_spread: float): void
    - drawPlantBar(window: sf::RenderWindow): void
    - drawBombs(window: sf::RenderWindow, cur_time: __int64_t): void
}

class People {
    - gun: Gun
    - pos: sf::FloatRect
    - cur_health: int
    - max_health: int
    - speed: int
    - dx: float
    - dy: float
    - health_bar: HealthBar
    - hitbox: sf::FloatRect
    - last_time: __int64_t
    - idle_anim: Animation
    - walking_anim: Animation
    - blood_spatter_anim: Animation
    - dead_anim: Animation
    - presentation_anim: Animation
    - is_walking: bool
    - bullet_contact_vec: sf::Vector2f
    + People()
    + People(health: int, speed: int)
    + draw(window: sf::RenderWindow&, cur_time: __int64_t)
    + aim(x: float, y: float): void
    + moving(cur_time: __int64_t, move_dx: float, move_dy: float): void
    + shooting(cur_time: __int64_t): void
    + check_collision(bullet: Bullet&, cur_time: __int64_t): bool
    + upgrade_gun(cur_time: __int64_t): void
    + alive(): bool
    + intersection(mousePos: sf::Vector2f): bool
    + start_presentation_animation(cur_time: __int64_t): void
    + set_position(new_pos: sf::FloatRect): void
    + set_weapon(weapon: Gun): void
    + get_hitbox(): sf::FloatRect
    + get_cur_health(): int
    + get_max_health(): int
    + get_damage(): int
    + get_speed(): int
    + get_direct(): sf::Vector2f
    + get_gun_info(): std::size_t
    + get_spread(): float
    + get_recharge_time(): std::size_t
    + get_bullets(): std::pair<std::vector<Bullet>::iterator, std::vector<Bullet>::iterator>
    + get_magazine_info(): std::pair<std::size_t, std::size_t>
    + get_presentation_sprite(cur_time: __int64_t): sf::Sprite
    - set_animation(idle_animation: Animation, walking_animation: Animation, blood_spatter_animation: Animation, dead_animation: Animation, presentation_animation: Animation): void
    - load_data(): void
}

Hero --|> People

class Bomb {
    - activate: bool
    - w: int
    - h: int
    - planting_time: __int64_t
    - start_plant_time: __int64_t
    - plant_duration: __int64_t
    - last_bomb_pos: sf::Vector2f
    - wait_anim: Animation
    + Bomb()
    + Bomb(w: int, h: int)
    + planting(pos_obj: sf::FloatRect, cur_time: __int64_t): void
    + drop_planting(): void
    + loadResources(): bool
    + draw(window: sf::RenderWindow&, cur_time: __int64_t): void
    + deactivate(): void
    + get_plant_info(): std::pair<__int64_t, __int64_t>
    + is_activate(): bool
    + get_pos(): sf::Vector2f
    + get_damage(): int
}

Hero --> Bomb

class Gun {
    - gun_tex: sf::Texture*
    - bullet_tex: sf::Texture*
    - anim_tex: sf::Texture*
    - gun_h: float
    - gun_w: float
    - bullet_h: float
    - bullet_w: float
    - bullets_in_gun: std::size_t
    - magazine_size: std::size_t
    - magazine_cnt: std::size_t
    - last_shoot_time: __int64_t
    - bullet_duration: __int64_t
    - recharge_time: __int64_t
    - speed_bullet: float
    - bullet_height: float
    - bullet_width: float
    - gun_sprite: sf::Sprite
    - bullet_sprite: sf::Sprite
    - magazine: std::vector<Bullet>
    - poz_x: float
    - poz_y: float
    - r: float
    - dx: float
    - dy: float
    - spread: float
    - damage: int
    - fire_anim: Animation
    - recharge_anim: Animation
    - presentation_anim: Animation
    + Gun()
    + Gun(gun_tex: sf::Texture&, bullet_tex: sf::Texture&, gun_h: float, gun_w: float, bullet_h: float, bullet_w: float, bullet_speed: float, bullet_duration: __int64_t, recharge_time: __int64_t, magazine_size: std::size_t, magazine_cnt: std::size_t, r: float, spread: float, damage: int)
    ~ Gun()
    + rotate(x: float, y: float, direct_x: float, direct_y: float): void
    + shoot(cur_time: __int64_t, is_running: bool): void
    + move_bullets(cur_time: __int64_t): void
    + draw(window: sf::RenderWindow&, cur_time: __int64_t): void
    + upgrade(cur_time: __int64_t): void
    + get_magazine_info(): std::pair<std::size_t, std::size_t>
    + get_gun_info(): std::size_t
    + get_spread(): float
    + get_damage(): int
    + change_damage(delta_damage: int): void
    + get_recharge_time(): std::size_t
    + get_bullets(): std::pair<std::vector<Bullet>::iterator, std::vector<Bullet>::iterator>
    + add_magazine(): void
    + change_recharge_time(delta_time: __int64_t): void
    + change_spread(delta_spread: float): void
    + start_presentation_animation(cur_time: __int64_t): void
    + get_presentation_sprite(cur_time: __int64_t): sf::Sprite
}

Hero --> Gun

class Bullet {
    - was_collision: bool
    - dx: float
    - dy: float
    - speed: int
    - last_time: __int64_t
    - sprite: sf::Sprite
    + Bullet()
    + Bullet(bullet_sprite: sf::Sprite&, poz: sf::FloatRect, dx: float, dy: float, speed: float, cur_time: __int64_t)
    + get_rect(): sf::FloatRect
    + move(cur_time: __int64_t): void
    + draw(window: sf::RenderWindow&): void
    + get_collision(): bool
    + getGlobalBounds(): sf::FloatRect
    + get_direct(): sf::Vector2f
    + collision(): void
}

Gun --> Bullet

@enduml
